// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Septem.Notifications.Core.Infrastructure;

#nullable disable

namespace Septem.Notifications.Core.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    partial class NotificationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CancellationKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cancellation_key");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("Data")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("data");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("default_language");

                    b.Property<string>("FcmConfiguration")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("fcm_configuration");

                    b.Property<Guid?>("GroupKey")
                        .HasColumnType("uuid")
                        .HasColumnName("group_key");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date_utc");

                    b.Property<string>("Payload")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("payload");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime>("TimeToSendUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time_to_send_utc");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_notifications");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationMessageEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("exception_message");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsView")
                        .HasColumnType("boolean")
                        .HasColumnName("is_view");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date_utc");

                    b.Property<Guid?>("NotificationTokenUid")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_token_uid");

                    b.Property<Guid>("NotificationUid")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_uid");

                    b.Property<string>("Payload")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("payload");

                    b.Property<string>("ServiceMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("service_message");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("title");

                    b.Property<string>("Token")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("token");

                    b.Property<byte?>("TokenType")
                        .HasColumnType("smallint")
                        .HasColumnName("token_type");

                    b.HasKey("Uid")
                        .HasName("pk_notification_messages");

                    b.HasIndex("NotificationTokenUid")
                        .HasDatabaseName("ix_notification_messages_notification_token_uid");

                    b.HasIndex("NotificationUid")
                        .HasDatabaseName("ix_notification_messages_notification_uid");

                    b.ToTable("notification_messages", (string)null);
                });

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationReceiverEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("NotificationUid")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_uid");

                    b.Property<string>("Parameters")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("parameters");

                    b.Property<byte>("ReceiverType")
                        .HasColumnType("smallint")
                        .HasColumnName("receiver_type");

                    b.Property<Guid?>("TargetUid")
                        .HasColumnType("uuid")
                        .HasColumnName("target_uid");

                    b.Property<string>("Token")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("token");

                    b.HasKey("Uid")
                        .HasName("pk_notification_receivers");

                    b.HasIndex("NotificationUid")
                        .HasDatabaseName("ix_notification_receivers_notification_uid");

                    b.ToTable("notification_receivers", (string)null);
                });

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationTokenEntity", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("language");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date_utc");

                    b.Property<Guid>("TargetUid")
                        .HasColumnType("uuid")
                        .HasColumnName("target_uid");

                    b.Property<string>("Token")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("token");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("type");

                    b.HasKey("Uid")
                        .HasName("pk_notification_tokens");

                    b.ToTable("notification_tokens", (string)null);
                });

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationMessageEntity", b =>
                {
                    b.HasOne("Septem.Notifications.Core.Entities.NotificationTokenEntity", "NotificationToken")
                        .WithMany()
                        .HasForeignKey("NotificationTokenUid")
                        .HasConstraintName("fk_notification_messages_notification_tokens_notification_toke");

                    b.HasOne("Septem.Notifications.Core.Entities.NotificationEntity", "Notification")
                        .WithMany("Messages")
                        .HasForeignKey("NotificationUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_messages_notifications_notification_uid");

                    b.Navigation("Notification");

                    b.Navigation("NotificationToken");
                });

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationReceiverEntity", b =>
                {
                    b.HasOne("Septem.Notifications.Core.Entities.NotificationEntity", "Notification")
                        .WithMany("Receivers")
                        .HasForeignKey("NotificationUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_receivers_notifications_notification_uid");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Septem.Notifications.Core.Entities.NotificationEntity", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Receivers");
                });
#pragma warning restore 612, 618
        }
    }
}
